#ifndef __REALFFT_TRANSFORM__
#define __REALFFT_TRANSFORM__

#include "complstd.h"

namespace namespace_fft
{

//! Тип - указатель на функцию БПФ
/*!
	Определение типа указателя на функцию БПФ
*/
typedef void  fftProc( Complex*, ulong, int );

//! Быстрое преобразование Фурье для вещественных рядов
/*!
	Быстрое преобразование Фурье для вещественных рядов, производимое в той же
	памяти, где расположены исходные данные. При попытке преобразования недопустимой
	длины последовательности генерируется исключение типа CmpException.

	Порядок выходной последовательности:

	 x[0]     = c.re[0]   (постоянная составляющая, вещественное значение)
	 x[1]     = c.re[n/2] (составляющая на частоте Найквиста, вещественное значение)
	 x[2]     = c.re[1]
	 x[3]     = c.im[1]
	 x[4]     = c.re[2]
	 x[5]     = c.im[2]
	         ...
	 x[2*i]   = c.re[i]
	 x[2*i+1] = c.im[i]
	         ...
	 x[n-2]   = c.re[n/2-1]
	 x[n-1]   = c.im[n/2-1] 

\param x	входной REAL/выходной Complex массив данных для прямого преобразования
			входной Complex/выходной REAL массив данных для обратного преобразования
\param n	длина массива вещественных данных, должна быть четной, 
			выходной комплексный массив имеет длину n/2
\param isign	направление преобразования (-1 соответствует прямому, 1 - обратному БПФ )
\param func	 функция типа fftProc для преобразования комплексного массива длиной n/2
				если func = NULL, то используется функция PfaFft
*/
COREDSP_API void RealFFt( REAL *x, ulong n, int isign, fftProc* func = NULL );

#ifdef USE_TEST_PROC
COREDSP_API bool TestRealFft();
#endif
}//namespace namespace_fft


#endif //__REALFFT_TRANSFORM__
