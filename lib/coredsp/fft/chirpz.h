#ifndef __CHIRPZRFFT_TRANSFORM__
#define __CHIRPZRFFT_TRANSFORM__

#include "complstd.h"
#include "export.h"
#include "commdsp.h"


namespace namespace_fft
{
//! Проверка допустимости длины для алгоритма fft любой длины
/*!
	Проверяется допустимость длины для алгоритма fft любой длины
\param n	проверяемая длина
\return		true - если длина является допустимой для данного алгоритма (т.е. всегда)
*/
COREDSP_API bool IsFftChirpZTLength( ulong n );

//! Быстрое преобразование Фурье (алгоритм, основанный на китайской теореме об остатках)
/*!
	Быстрое преобразование Фурье (алгоритм, основанный на китайской теореме об остатках).
	Может использоваться для последовательностей любой длины.
	Для данного алгоритма требуется дополнительная память в размере
	равном размеру исходного массива * 4. Для выделения/освобождения памяти
	используется средства самой библиотеки ЦОС (DSPMemoryAllocator *defaultAllocator).
\param x	входной/выходной массив комплексных данных
\param n	длина массива
\param isign	направление преобразования (-1 соответствует прямому, 1 - обратному БПФ )
\param alloc	распределитель памяти
\see DSPMemoryAllocator
*/
COREDSP_API void FftChirpZT( Complex *x, ulong n, int is );

//! Быстрое преобразование Фурье (алгоритм, основанный на китайской теореме об остатках)
/*!
	Быстрое преобразование Фурье (алгоритм, основанный на китайской теореме об остатках).
	Может использоваться для последовательностей любой длины.
	Для данного алгоритма требуется дополнительная память в размере
	равном размеру исходного массива * 4. Для выделения/освобождения памяти
	используется специальный распределитель памяти типа DSPMemoryAllocator.
\param x	входной/выходной массив комплексных данных
\param n	длина массива
\param isign	направление преобразования (-1 соответствует прямому, 1 - обратному БПФ )
\param alloc	распределитель памяти
\see DSPMemoryAllocator
*/
COREDSP_API void FftChirpZT( Complex *x, ulong n, int isign, DSPMemoryAllocator *alloc );

#ifdef USE_TEST_PROC
COREDSP_API bool TestChirpZT();
#endif
} //namespace namespace_fft


#endif //__CHIRPZRFFT_TRANSFORM__
